version: 2.1
machine: true
orbs:
  aws-cli: circleci/aws-cli@3.1
  slack: circleci/slack@4.10.1

jobs:
  build-and-test:
    machine:
      image: ubuntu-2004:202107-02
      docker_layer_caching: true
    steps:
      - checkout
      - run:
          name: Install OpenJDK 17
          command: |
            sudo apt-get update && sudo apt-get install openjdk-17-jdk
            sudo update-alternatives --set java /usr/lib/jvm/java-17-openjdk-amd64/bin/java
            sudo update-alternatives --set javac /usr/lib/jvm/java-17-openjdk-amd64/bin/javac
      - run:
          name: Generate cumulative pom.xml checksum
          command: |
            find . -type f -name "pom.xml" -exec sh -c "sha256sum {} >> ~/pom-checksum.tmp" \;
            sort -o ~/pom-checksum ~/pom-checksum.tmp
      - restore_cache:
          keys:
            - symeo-monolithic-backend-multi-module-mvn-{{ checksum "~/pom-checksum" }}
      - run:
          name: Build
          command: ./mvnw install -T 12 -DskipTests -DskipITs
      - save_cache:
          paths:
            - ~/.m2
          key: symeo-monolithic-backend-multi-module-mvn-{{ checksum "~/pom-checksum" }}
      - save_cache:
          key: build-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - bootstrap/target/
      - run:
          name: Unit Tests
          command: ./mvnw test -T 12
      - run:
          name: Integration Tests
          command: ./mvnw failsafe:integration-test failsafe:verify -T 12
      - run:
          name: Aggregate Jacoco coverage reports
          command: ./mvnw jacoco:report-aggregate
      - run:
          name: Send tests data to Symeo
          command: |
            curl -o- ${SYMEO_TESTING_SCRIPT_URL} | bash -s -- \
              --api-key ${SYMEO_ORG_API_KEY} \
              --coverage-report-path coverage/target/site/jacoco-aggregate/jacoco.xml \
              --coverage-report-type jacoco \
              --unit-test-file-pattern "./**/src/test/java/**/*Test.java" \
              --integration-test-file-pattern "./**/src/test/java/**/*IT.java" \
              --code-file-pattern "./**/src/main/java/**/*.java" \
              --test-framework jUnit \
              --repository-name ${CIRCLE_PROJECT_REPONAME} \
              --branch-name ${CIRCLE_BRANCH} \
              --commit-sha ${CIRCLE_SHA1}
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1
  deploy:
    executor: aws-cli/default
    steps:
      - checkout
      - setup_remote_docker
      - aws-cli/setup
      - restore_cache:
          key: build-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Prepare Github App private key
          command: |
            source .aws/prepare_github_certificate.sh
            prepare_github_private_key $PWD
      - run:
          name: Build docker
          command: |
            cd .aws && ./build_docker.sh \
              --region ${AWS_REGION} \
              --env ${ENVIRONMENT} \
              --tag ${CIRCLE_SHA1} \
               -s "symeo-front-api-${ENVIRONMENT}" -sp "aws,front-api" --registry "symeo-backend-ecs-repository-${ENVIRONMENT}"
      - run:
          name: Build docker
          command: |
            cd .aws && ./build_docker.sh \
              --region ${AWS_REGION} \
              --env ${ENVIRONMENT} \
              --tag ${CIRCLE_SHA1} \
               -s "symeo-job-api-${ENVIRONMENT}" -sp "aws,job-api"  --registry "symeo-backend-ecs-repository-job-${ENVIRONMENT}"
      - run:
          name: Deploy
          command: |
            cd .aws && ./deploy.sh \
              --region ${AWS_REGION} \
              --env ${ENVIRONMENT} \
              --datadog-api-key ${DATADOG_API_KEY} \
              --db-password ${DB_PASSWORD} \
              --tag ${CIRCLE_SHA1}
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1
  build-aws-infrastructure:
    executor: aws-cli/default
    steps:
      - checkout
      - setup_remote_docker
      - aws-cli/setup
      - restore_cache:
          key: build-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Prepare Github App private key
          command: |
            source .aws/prepare_github_certificate.sh
            prepare_github_private_key $PWD
      - run:
          name: Build infrastructure
          command: |
            cd .aws && ./build_infrastructure.sh \
              --region ${AWS_REGION} \
              --env ${ENVIRONMENT} \
              --datadog-api-key ${DATADOG_API_KEY} \
              --datadog-app-key ${DATADOG_APP_KEY} \
              --db-password ${DB_PASSWORD} \
              --domain ${DOMAIN} \
              --prefix-url ${PREFIX_URL} \
              --job-prefix-url ${JOB_PREFIX_URL} \
              --acm-arn ${ACM_ARN} \
              --acm-arn-alb ${ACM_ARN_ALB} \
              --tag ${CIRCLE_SHA1} \
              --vpc-id ${VPC_ID} \
              --subnets ${SUBNETS}
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1

workflows:
  build-test-deploy:
    jobs:
      - build-and-test:
          context:
            - slack-notifications
      - deploy:
          requires:
            - build-and-test
          context:
            - staging
            - slack-notifications
          filters:
            branches:
              only:
                - staging
      - deploy:
          requires:
            - build-and-test
          context:
            - demo
            - slack-notifications
          filters:
            branches:
              only:
                - demo
      - deploy:
          requires:
            - build-and-test
          context:
            - production
            - slack-notifications
          filters:
            branches:
              only:
                - main
  build-infrastructure:
    jobs:
      - build-and-test:
          context:
            - slack-notifications
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - /^infrastructure-staging-.+$/
                - /^infrastructure-demo-.+$/
                - /^infrastructure-production-.+$/
      - build-aws-infrastructure:
          requires:
            - build-and-test
          context:
            - staging
            - slack-notifications
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^infrastructure-staging-.+$/
      - build-aws-infrastructure:
          requires:
            - build-and-test
          context:
            - demo
            - slack-notifications
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^infrastructure-demo-.+$/
      - build-aws-infrastructure:
          requires:
            - build-and-test
          context:
            - production
            - slack-notifications
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^infrastructure-production-.+$/