Description: Catlean Backend - ECS Services

Parameters:
  DesiredCount:
    Type: Number
    Default: 2

  MaxCount:
    Type: Number
    Default: 50

  ECSCluster:
    Type: String

  Tag:
    Type: String

  Env:
    Type: String

  EnvFilesS3Bucket:
    Type: String

  DataDogApiKey:
    Type: String

  ECSTaskRole:
    Type: String

  ECSExecutionRole:
    Type: String

  ECSAutoScaleRole:
    Type: String

  DockerRepository:
    Type: String

  CloudwatchLogsGroup:
    Type: String

  TargetGroup:
    Type: String

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id

  Subnets:
    Description: Choose which subnets the Application Load Balancer should be deployed to
    Type: List<AWS::EC2::Subnet::Id>

Resources:
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      Family: !Sub CatleanBackend-TaskFamily-${Env}
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${ECSExecutionRole}
      TaskRoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${ECSTaskRole}
      Cpu: 1024
      Memory: 2GB
      ContainerDefinitions:
      - Name: !Sub CatleanBackendContainer-${Env}
        Image: !Sub ${DockerRepository}:${Tag}
        PortMappings:
        - ContainerPort: 9999
        EnvironmentFiles:
        - Type: s3
          Value: !Sub arn:aws:s3:::${EnvFilesS3Bucket}/.env
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref CloudwatchLogsGroup
            awslogs-region: !Sub ${AWS::Region}
            awslogs-stream-prefix: catlean-backendAssiociatePublicIp
      - Name: !Sub DataDogAgent-${Env}
        Image: 'public.ecr.aws/datadog/agent:latest'
        Cpu: 100
        Memory: 256
        Environment:
          - Name: DD_API_KEY
            Value: !Ref DataDogApiKey
          - Name: DD_SITE
            Value: datadoghq.eu
          - Name: ECS_FARGATE
            Value: true

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref DesiredCount
      HealthCheckGracePeriodSeconds: 120
      LaunchType: FARGATE
      TaskDefinition: !Ref TaskDefinition
      ServiceName: !Sub CatleanBackend-Service-${Env}
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref SecurityGroup
          Subnets: !Ref Subnets
      LoadBalancers:
      - ContainerName: !Sub CatleanBackendContainer-${Env}
        ContainerPort: 9999
        TargetGroupArn: !Ref TargetGroup

  scalingPolicyUp:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ScalingPolicyUp-${Env}
      PolicyType: StepScaling
      ScalingTargetId: !Ref scalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 30
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 2

  scalingPolicyDown:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ScalingPolicyDown-${Env}
      PolicyType: StepScaling
      ScalingTargetId: !Ref scalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 30
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalUpperBound: 0
          ScalingAdjustment: -1

  scalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxCount
      MinCapacity: !Ref DesiredCount
      ResourceId: !Join [ "/", [ "service", !Ref ECSCluster, !GetAtt ECSService.Name ] ]
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/${ECSAutoScaleRole}
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ServiceCPUAlarmScaleUp:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 3
      Statistic: Average
      AlarmName: !Sub CatleanBackendServicescalingCPUscaleUpAlarm-${Env}
      Threshold: 50
      AlarmDescription: Alarm if CPU is too high
      Period: 60
      AlarmActions:
      - !Ref scalingPolicyUp
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value: !Ref ECSCluster
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization

  ServiceCPUAlarmScaleDown:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 4
      Statistic: Average
      AlarmName: !Sub CatleanBackendServicescalingCPUscaleDownAlarm-${Env}
      Threshold: 10
      AlarmDescription: Alarm if CPU is too low
      Period: 60
      AlarmActions:
      - !Ref scalingPolicyDown
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value: !Ref ECSCluster
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization

Outputs:
  ServiceName:
    Value: !GetAtt ECSService.Name
  FamilyName:
    Value: !Sub CatleanBackend-TaskFamily-${Env}
